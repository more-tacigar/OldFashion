# 6 "oflexer.mll"
 
  exception Syntax_error of string

  open Ofparser
  open Lexing

  let reserved_words = [
    ("fn", FN);
    ("var", VAR);
    ("return", RETURN);
    ("if", IF);
    ("else", ELSE);
    ("for", FOR);
    ("while", WHILE);
    ("true", TRUE);
    ("false", FALSE);
    ("and", AND);
    ("or", OR);
  ]

  let next_line lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_bol = lexbuf.lex_curr_pos;
                 pos_lnum = pos.pos_lnum + 1;
      }

# 30 "oflexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\078\000\231\255\232\255\233\255\234\255\235\255\236\255\
    \237\255\002\000\003\000\031\000\033\000\245\255\246\255\247\255\
    \248\255\249\255\250\255\251\255\160\000\235\000\001\001\035\001\
    \254\255\001\000\003\000\058\001\245\000\011\001\072\001\243\255\
    \241\255\240\255\239\255\038\001\246\255\039\001\116\001\255\255\
    \248\255\249\255\250\255\251\255\252\255\253\255\254\255";
  Lexing.lex_backtrk = 
   "\003\000\025\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\017\000\255\255\013\000\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\025\000\003\000\003\000\002\000\
    \255\255\001\000\000\000\255\255\003\000\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\008\000\010\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\037\000\000\000\037\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\024\000\024\000\026\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\010\000\019\000\026\000\000\000\000\000\000\000\000\000\
    \008\000\007\000\014\000\016\000\018\000\015\000\021\000\013\000\
    \022\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\000\000\017\000\012\000\009\000\011\000\034\000\
    \033\000\001\000\001\000\001\000\001\000\020\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\004\000\032\000\003\000\031\000\001\000\
    \000\000\001\000\001\000\001\000\001\000\020\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\006\000\000\000\005\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\000\000\000\000\029\000\000\000\029\000\000\000\000\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\000\000\001\000\
    \002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\021\000\
    \027\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\000\000\027\000\000\000\
    \039\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\021\000\000\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\029\000\027\000\029\000\
    \027\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\038\000\255\255\000\000\000\000\000\000\000\000\
    \027\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\046\000\000\000\000\000\000\000\001\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \045\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
    \000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\042\000\000\000\000\000\000\000\041\000\000\000\
    \040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\036\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\025\000\026\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\026\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\009\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\012\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\255\255\255\255\255\255\255\255\001\000\255\255\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\255\255\255\255\020\000\255\255\020\000\255\255\255\255\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\255\255\255\255\255\255\255\255\020\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\022\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\255\255\022\000\255\255\
    \035\000\037\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\023\000\255\255\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\027\000\022\000\027\000\
    \023\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\255\255\255\255\255\255\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\035\000\037\000\255\255\255\255\255\255\255\255\
    \023\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\038\000\255\255\255\255\255\255\030\000\
    \255\255\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \038\000\255\255\255\255\255\255\255\255\255\255\038\000\255\255\
    \255\255\255\255\038\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\038\000\255\255\255\255\255\255\038\000\255\255\
    \038\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\035\000\037\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read lexbuf =
    __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "oflexer.mll"
    ( read lexbuf )
# 234 "oflexer.ml"

  | 1 ->
# 48 "oflexer.mll"
    ( next_line lexbuf; read lexbuf )
# 239 "oflexer.ml"

  | 2 ->
# 50 "oflexer.mll"
    ( let num = int_of_string (lexeme lexbuf) in
      NUMERIC_LITERAL (float_of_int num)
    )
# 246 "oflexer.ml"

  | 3 ->
# 54 "oflexer.mll"
    ( NUMERIC_LITERAL (float_of_string (lexeme lexbuf)) )
# 251 "oflexer.ml"

  | 4 ->
# 56 "oflexer.mll"
    ( read_string (Buffer.create 17) lexbuf )
# 256 "oflexer.ml"

  | 5 ->
# 58 "oflexer.mll"
    ( COMMA )
# 261 "oflexer.ml"

  | 6 ->
# 60 "oflexer.mll"
    ( SEMI )
# 266 "oflexer.ml"

  | 7 ->
# 62 "oflexer.mll"
    ( PLUS )
# 271 "oflexer.ml"

  | 8 ->
# 64 "oflexer.mll"
    ( MINUS )
# 276 "oflexer.ml"

  | 9 ->
# 66 "oflexer.mll"
    ( MULT )
# 281 "oflexer.ml"

  | 10 ->
# 68 "oflexer.mll"
    ( DIV )
# 286 "oflexer.ml"

  | 11 ->
# 70 "oflexer.mll"
    ( LT )
# 291 "oflexer.ml"

  | 12 ->
# 72 "oflexer.mll"
    ( LE )
# 296 "oflexer.ml"

  | 13 ->
# 74 "oflexer.mll"
    ( GT )
# 301 "oflexer.ml"

  | 14 ->
# 76 "oflexer.mll"
    ( GE )
# 306 "oflexer.ml"

  | 15 ->
# 78 "oflexer.mll"
    ( NE )
# 311 "oflexer.ml"

  | 16 ->
# 80 "oflexer.mll"
    ( EQ )
# 316 "oflexer.ml"

  | 17 ->
# 82 "oflexer.mll"
    ( ASSIGN )
# 321 "oflexer.ml"

  | 18 ->
# 84 "oflexer.mll"
    ( LPAREN )
# 326 "oflexer.ml"

  | 19 ->
# 86 "oflexer.mll"
    ( RPAREN )
# 331 "oflexer.ml"

  | 20 ->
# 88 "oflexer.mll"
    ( LBRACE )
# 336 "oflexer.ml"

  | 21 ->
# 90 "oflexer.mll"
    ( RBRACE )
# 341 "oflexer.ml"

  | 22 ->
# 92 "oflexer.mll"
    ( LBRACKET )
# 346 "oflexer.ml"

  | 23 ->
# 94 "oflexer.mll"
    ( RBRACKET )
# 351 "oflexer.ml"

  | 24 ->
# 96 "oflexer.mll"
    ( EOF )
# 356 "oflexer.ml"

  | 25 ->
# 98 "oflexer.mll"
    ( let id = lexeme lexbuf in
      try
        List.assoc id reserved_words
      with
      _ -> IDENTIFIER id
    )
# 366 "oflexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
    __ocaml_lex_read_string_rec buf lexbuf 35
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 106 "oflexer.mll"
              ( STRING_LITERAL (Buffer.contents buf) )
# 378 "oflexer.ml"

  | 1 ->
# 107 "oflexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 383 "oflexer.ml"

  | 2 ->
# 108 "oflexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 388 "oflexer.ml"

  | 3 ->
# 109 "oflexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 393 "oflexer.ml"

  | 4 ->
# 110 "oflexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 398 "oflexer.ml"

  | 5 ->
# 111 "oflexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 403 "oflexer.ml"

  | 6 ->
# 112 "oflexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 408 "oflexer.ml"

  | 7 ->
# 113 "oflexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 413 "oflexer.ml"

  | 8 ->
# 115 "oflexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      read_string buf lexbuf
    )
# 420 "oflexer.ml"

  | 9 ->
# 118 "oflexer.mll"
        ( raise (Syntax_error ("String is not terminated")) )
# 425 "oflexer.ml"

  | 10 ->
# 119 "oflexer.mll"
      ( raise (Syntax_error ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 430 "oflexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

;;

